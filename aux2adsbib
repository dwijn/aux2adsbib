#!/usr/bin/env python

import os
import sys
import certifi
import ads
import bibtexparser
from bibtexparser.bparser import BibTexParser

def process_file(filename):
    # Your file processing code goes here

    # produce the aux and bibliography files
    basename, ext = os.path.splitext(filename)
    auxfile = basename + '.aux'
    bibfile = basename + '.bib'

    # check if the aux file exists and exit if it doesn't
    if not os.path.exists(auxfile):
        print(f'Error: aux file {auxfile} does not exist. Do you need to run LaTeX?')
        sys.exit(1)

    # read the contents of the bib file if it exists
    try:
        f = open(bibfile, 'r')
        bibdbs = f.read()
        f.close()
        bibdb = bibtexparser.loads(bibdbs, BibTexParser(common_strings = True))
        havebibs = [d['ID'] for d in bibdb.entries]
        print(f'Read {len(havebibs)} entries from {bibfile}.')
    except:
        print(f'{bibfile} does not exist or is empty.')
        bibdbs = ''
        havebibs = [] # empty list

    # read required bibcodes from aux file
    with open(auxfile, 'r') as f:
        allbibs = [] # empty list
        for line in f:
            if "\citation" in line:
                line = line[10:-2] # grab just the ADS bibcodes
                allbibs.extend(line.split(','))
        allbibs.sort()

    # now remove the items from allbibs if they exist in havebibs
    needbibs = list(set([b for b in allbibs if b not in havebibs]))

    # query ADS if there are any missing
    if len(needbibs) > 0:
        print(f'Attempting to get {len(needbibs)} missing entries from ADS.')
        try:
            bibdbs += ads.ExportQuery(bibcodes=needbibs, format='bibtex').execute()
        except ads.exceptions.APIResponseError as e:
            print(f'ADS query failed: {e.value}')
        except:
            print(f'Something went wrong with the ADS query.')

        # see what we got
        bibdb = bibtexparser.loads(bibdbs, BibTexParser(common_strings = True))
        havebibs = [d['ID'] for d in bibdb.entries]

        # find the citations we couldn't resolve
        leftbibs = list(set([b for b in allbibs if b not in havebibs]))

        # tell the user
        print(f'Got {len(needbibs) - len(leftbibs)} entries from ADS.')
        if len(leftbibs) > 0:
            print(f'Missing entries are:')
            for i, b in enumerate(leftbibs):
                print(f'{i+1}: {b}')

        # write the new bibliography
        with open(basename + '.bib', 'w') as f:
            f.write(bibdbs)
    else:
        print(f'No missing entries, nothing to do.')
   

def main():
    # Check if a file name is provided as an argument
    if len(sys.argv) < 2:
        print("Error: Please provide a file name as an argument.")
        return
    
    # Get the file name from the command line arguments
    filename = sys.argv[1]
    
    # Call the function to process the file
    process_file(filename)

if __name__ == '__main__':
    main()

